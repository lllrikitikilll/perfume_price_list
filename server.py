import logging
import os
from dotenv import load_dotenv

import telebot
from telebot.apihelper import delete_message
from telebot.types import Message, CallbackQuery, InlineKeyboardButton

from database import get_ban_list, save_user_in_db, save_current_message_id, last_command, get_brands_with_alpha, \
    get_all_brands, get_brand_perfumes, get_one_perfume

from admin_utils import replace_photo, replace_price, add_perfume, del_perfume, info_admin, get_list_users
from utils import print_user_command, do_markup

load_dotenv('./config.env')
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN = os.getenv('TELEGRAM_ADMIN')

ALPHA = list("ABCEFGHIJKLMNOPRSTVWZ")
ALPHA.append('123...')  # –Ω–∞—á–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –ø–∞—Ä—Ñ—é–º–∞

bot = telebot.TeleBot(TOKEN)


def admin(func):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""

    def wrapper(message: Message):
        print_user_command(message)
        if str(message.from_user.id) not in ADMIN:
            return
        return func(message)

    return wrapper


def ban(func):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∫–∏ banned"""

    def wrapper(message: Message | CallbackQuery):
        if isinstance(message, Message):
            user_id = message.from_user.id
        else:
            user_id = message.message.chat.id
        banned = get_ban_list(user_id=user_id)
        if type(banned) is tuple and banned[0] == 1:
            print_user_command(message)
            return bot.send_message(user_id, '–û—à–∏–±–∫–∞, —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è')
        return func(message)

    return wrapper


def restart(func):
    """–ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏—Ç –Ω–∞–∂–∞—Ç—å /start"""

    def wrapper(message: Message | CallbackQuery):
        try:
            func(message)
        except Exception as e:

            if "Error code: 400" in str(e):
                print("–ù–µ–∑–∞—á–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å")
                return
            print(e)
            if isinstance(message, Message):
                to = message.from_user.id
                return bot.send_message(to, '–û–π-–π–æ–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ /start')

            else:
                to = message.message.chat.id
                return bot.send_message(to, '–û–π-–π–æ–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ /start')

    return wrapper


@bot.message_handler(commands=['info', 'users', 'price', 'add', 'del'])
@admin
def admin_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    match list(map(lambda x: x.strip(), message.text.split(','))):
        case ['/info']:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
            text = info_admin()
            bot.send_message(message.from_user.id, text)
        case ['/price', price] if price.isdigit():
            # –ü–æ–º–µ–Ω—è—Ç—å —Ü–µ–Ω—É –ø–∞—Ä—Ñ—é–º–∞
            perfume = last_command(user=message, option='get', value='last_perfume')
            replace_price(perfume=perfume, price=int(price))
            bot.send_message(message.from_user.id, "–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞\n/start")
        case ['/add', str(brand), str(name), price] if price.isdigit():
            # –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ñ—é–º
            add_perfume(new_perfume=(brand, name, int(price)))
            bot.send_message(message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω: {brand} {name}")
        case ['/del', str(name)]:
            # –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ñ—é–º
            del_perfume(name=name)
            bot.send_message(message.from_user.id, f"–£–¥–∞–ª–µ–Ω –ø–∞—Ä—Ñ—é–º: {name}")
        case ['/users']:
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            bot.send_message(message.from_user.id, get_list_users())
        case _:
            bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ")


@bot.message_handler(content_types=['document'])
@admin
def handle_docs_photo(message: Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø–∞—Ä—Ñ—é–º–∞"""
    try:
        brand = last_command(user=message, option='get', value='last_brand')
        perfume = last_command(user=message, option='get', value='last_perfume')
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_name = perfume + '.' + message.document.file_name.split('.')[-1]
        src = './tmp/' + file_name
        replace_photo(perfume=perfume, photo=file_name)
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è {brand}: {perfume}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–±–ª–µ–º–∞ '{e}'\n–î–∞–≤–∞–π —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é /start")


@bot.message_handler(commands=['start'])
@restart
@ban
def start_bot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print_user_command(message)
    #last_command(user=message, option='save')
    match message.text:
        case '/start':
            old_user = save_user_in_db(user=message)
            markup = do_markup(ALPHA, row=5)  # –°–æ–∑–¥–∞–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —à–∏—Ä–∏–Ω–æ–π –≤ 5 —Å—Ç–æ–ª–±—Ü–æ–≤
            text = "üî† –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –±—É–∫–≤—ã:"

            if old_user:
                # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                try:
                    delete_message(TOKEN, chat_id=old_user[1], message_id=old_user[0])
                except Exception as e:
                    print(e)
            msg = bot.send_message(message.chat.id, text, reply_markup=markup)
            save_current_message_id(option='save', id=msg.id, chat_id=msg.chat.id)


@bot.message_handler(content_types=['text'])
def just_see(message):
    """–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_user_command(message)


@bot.callback_query_handler(lambda call: call.data)
@restart
@ban
def callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
    #last_command(user=call, option='save')
    print_user_command(call)
    # –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—Ä–µ–Ω–¥—ã
    if call.data in ALPHA:
        markup = do_markup(get_brands_with_alpha(call=call), row=2)
        markup.row(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='back_to_alpha'))
        bot.edit_message_text(f"üî§ –ë—Ä–µ–Ω–¥—ã —Å –Ω–∞—á–∞–ª—å–Ω–æ–π '{call.data}':", call.message.chat.id, call.message.id,
                              reply_markup=markup)

    # –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–Ω–µ–π–∫—É –±—Ä–µ–Ω–¥–∞
    elif call.data in get_all_brands():
        last_command(user=call, option='save', value='last_perfume')
        last_command(user=call, option='save', value='last_brand')
        markup = do_markup(get_brand_perfumes(call=call), row=2)
        markup.row(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='back_to_brand'))
        bot.edit_message_text(f"üåü –õ–∏–Ω–µ–π–∫–∞ –±—Ä–µ–Ω–¥–∞ '{call.data}':", call.message.chat.id, call.message.id,
                              reply_markup=markup)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ñ—é–º–µ
    elif call.data in get_brand_perfumes(call=last_command(user=call, option='get', value='last_brand')):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä—Ñ—é–º –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if last_command(user=call, option='get', value='last_perfume') == call.data:
            bot.answer_callback_query(callback_query_id=call.id, text=f'–í—ã–±—Ä–∞–Ω {call.data}')  # –í—ã–∑–æ–≤ "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏"
        else:
            brand = last_command(user=call, option='get', value='last_brand')
            text, photo_name = get_one_perfume(call=call)
            last_command(user=call, option='save', value='last_perfume')
            markup = do_markup(get_brand_perfumes(call=brand), 2)
            markup.row(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='back_to_brand_with_delete'))

            if not photo_name:
                photo_name = '–¥—É—Ö–∏2.jpg'  # –§–æ—Ç–æ–∑–∞–≥–ª—É—à–∫–∞
            photo = open('./tmp/' + photo_name, 'rb')

            delete_message(TOKEN, chat_id=call.message.chat.id, message_id=call.message.id)
            msg = bot.send_photo(caption=text, chat_id=call.message.chat.id, reply_markup=markup, photo=photo)
            save_current_message_id(option='save', id=msg.id, chat_id=msg.chat.id)

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±—É–∫–≤–∞–º–∏
    elif call.data == 'back_to_alpha':
        markup = do_markup(ALPHA, row=5)
        bot.edit_message_text("üî† –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –±—É–∫–≤—ã:", call.message.chat.id,
                              call.message.id, reply_markup=markup)

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±—Ä–µ–Ω–¥–∞–º–∏
    elif call.data == 'back_to_brand':
        alpha = last_command(user=call, option='get', value='last_brand')[0]
        markup = do_markup(get_brands_with_alpha(call=alpha), row=2)
        markup.row(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='back_to_alpha'))
        bot.edit_message_text(f"üî§ –ë—Ä–µ–Ω–¥—ã —Å –Ω–∞—á–∞–ª—å–Ω–æ–π '{alpha}':", call.message.chat.id, call.message.id,
                              reply_markup=markup)

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±—Ä–µ–Ω–¥–∞–º–∏ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
    elif call.data == 'back_to_brand_with_delete':
        alpha = last_command(user=call, option='get', value='last_brand')[0]
        markup = do_markup(get_brands_with_alpha(call=alpha), row=2)
        markup.row(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='back_to_alpha'))
        delete_message(TOKEN, chat_id=call.message.chat.id, message_id=call.message.id)
        msg = bot.send_message(call.message.chat.id, f"üî§ –ë—Ä–µ–Ω–¥—ã —Å –Ω–∞—á–∞–ª—å–Ω–æ–π '{alpha}':", reply_markup=markup)
        save_current_message_id(option='save', id=msg.id, chat_id=msg.chat.id)


if __name__ == '__main__':
    print('–†–∞–±–æ—Ç–∞–µ–º')
    bot.infinity_polling(logger_level=logging.INFO)
